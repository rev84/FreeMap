// Generated by CoffeeScript 1.10.0
var Map, Town, Utility;

$().ready(function() {
  return Map.drawTown();
});

Map = (function() {
  function Map() {}

  Map.MAP_X = 1000;

  Map.MAP_Y = 800;

  Map.TOWN_NUM = 15;

  Map.TOWN_DISTANCE_MIN = 200;

  Map.towns = [];

  Map.init = function() {};

  Map.drawTown = function() {
    var end, img, j, len, posAry, ref, start, x, y;
    start = Utility.militime(true);
    $('#map').css({
      width: this.MAP_X + 'px',
      height: this.MAP_Y + 'px'
    });
    posAry = this.generatePos();
    for (j = 0, len = posAry.length; j < len; j++) {
      ref = posAry[j], x = ref[0], y = ref[1];
      img = $('<img>').attr('src', './img/town.png').addClass('town').css({
        left: '' + x + 'px',
        top: '' + y + 'px'
      });
      $('#map').append(img);
    }
    end = Utility.militime(true);
    return console.log("" + (end - start) + " sec");
  };

  Map.generatePos = function() {
    var checkPut, j, k, posAry, randomComplete, randomPut, ref, res, rt, t;
    posAry = [];
    randomPut = (function(_this) {
      return function() {
        var flag, j, len, pickX, pickY, ref, ref1, x, y;
        ref = [Utility.rand(0, _this.MAP_X - 1), Utility.rand(0, _this.MAP_Y - 1)], pickX = ref[0], pickY = ref[1];
        flag = false;
        for (j = 0, len = posAry.length; j < len; j++) {
          ref1 = posAry[j], x = ref1[0], y = ref1[1];
          if (Math.pow(pickX - x, 2) + Math.pow(pickY - y, 2) < Math.pow(_this.TOWN_DISTANCE_MIN, 2)) {
            return false;
          }
        }
        return [pickX, pickY];
      };
    })(this);
    checkPut = (function(_this) {
      return function() {
        var canPut, j, k, l, len, m, mapAry, o, posX, posY, ref, ref1, ref2, ref3, ref4, ref5, ref6, x, y;
        mapAry = Utility.generateArray(_this.MAP_X, _this.MAP_Y, true);
        for (j = 0, len = posAry.length; j < len; j++) {
          ref = posAry[j], posX = ref[0], posY = ref[1];
          for (x = k = ref1 = posX - _this.TOWN_DISTANCE_MIN, ref2 = posX + _this.TOWN_DISTANCE_MIN; ref1 <= ref2 ? k <= ref2 : k >= ref2; x = ref1 <= ref2 ? ++k : --k) {
            if (!((0 <= x && x < _this.MAP_X))) {
              continue;
            }
            for (y = l = ref3 = posY - _this.TOWN_DISTANCE_MIN, ref4 = posY + _this.TOWN_DISTANCE_MIN; ref3 <= ref4 ? l < ref4 : l > ref4; y = ref3 <= ref4 ? ++l : --l) {
              if (!((0 <= y && y < _this.MAP_Y))) {
                continue;
              }
              if (Math.pow(posX - x, 2) + Math.pow(posY - y, 2) < Math.pow(_this.TOWN_DISTANCE_MIN, 2)) {
                mapAry[x][y] = false;
              }
            }
          }
        }
        canPut = [];
        for (x = m = 0, ref5 = mapAry.length; 0 <= ref5 ? m < ref5 : m > ref5; x = 0 <= ref5 ? ++m : --m) {
          for (y = o = 0, ref6 = mapAry[x].length; 0 <= ref6 ? o < ref6 : o > ref6; y = 0 <= ref6 ? ++o : --o) {
            if (mapAry[x][y]) {
              canPut.push([x, y]);
            }
          }
        }
        if (canPut.length === 0) {
          return false;
        }
        return canPut.shuffle().pop();
      };
    })(this);
    for (t = j = 0, ref = this.TOWN_NUM; 0 <= ref ? j < ref : j > ref; t = 0 <= ref ? ++j : --j) {
      randomComplete = false;
      for (rt = k = 0; k < 100; rt = ++k) {
        res = randomPut();
        if (res === false) {
          continue;
        }
        posAry.push(res);
        randomComplete = true;
        break;
      }
      if (randomComplete) {
        continue;
      }
      res = checkPut();
      if (res === false) {
        return false;
      }
      posAry.push(res);
    }
    return posAry;
  };

  return Map;

})();

Town = (function() {
  Town.prototype.name = null;

  function Town(posX1, posY1) {
    this.posX = posX1;
    this.posY = posY1;
  }

  Town.generateName = function() {};

  return Town;

})();

Utility = (function() {
  function Utility() {}

  Utility.generateArray = function(x, y, val) {
    var j, k, ref, ref1, res, xx, yAry, yy;
    if (val == null) {
      val = null;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = val;
    }
    for (xx = k = 0, ref1 = x; 0 <= ref1 ? k < ref1 : k > ref1; xx = 0 <= ref1 ? ++k : --k) {
      res[xx] = yAry.copy();
    }
    return res;
  };

  Utility.militime = function(get_as_float) {
    if (get_as_float == null) {
      get_as_float = false;
    }
    return +new Date() / (get_as_float ? 1000 : 1);
  };

  Utility.rand = function(min, max) {
    Math.round();
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  return Utility;

})();

Array.prototype.shuffle = function() {
  var i, n, ref;
  n = this.length;
  while (n) {
    n--;
    i = Utility.rand(0, n);
    ref = [this[n], this[i]], this[i] = ref[0], this[n] = ref[1];
  }
  return this;
};

Array.prototype.in_array = function(value) {
  var j, len, v;
  for (j = 0, len = this.length; j < len; j++) {
    v = this[j];
    if (v === value) {
      return true;
    }
  }
  return false;
};

Array.prototype.copy = function() {
  var j, k, len, len1, res, res2, v, v2;
  res = [];
  for (j = 0, len = this.length; j < len; j++) {
    v = this[j];
    res2 = [];
    for (k = 0, len1 = v.length; k < len1; k++) {
      v2 = v[k];
      res2.push(v2);
    }
    res.push(res2);
  }
  return res;
};
