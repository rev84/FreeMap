// Generated by CoffeeScript 1.10.0
var Map, Town, Utility;

$().ready(function() {
  return Map.drawTown();
});

Map = (function() {
  function Map() {}

  Map.MAP_X = 1000;

  Map.MAP_Y = 800;

  Map.TOWN_NUM = 15;

  Map.TOWN_DISTANCE_MIN = 100;

  Map.towns = [];

  Map.init = function() {};

  Map.drawTown = function() {
    var end, img, j, len, posAry, ref, start, x, y;
    start = Utility.militime(true);
    $('#map').css({
      width: this.MAP_X + 'px',
      height: this.MAP_Y + 'px'
    });
    posAry = this.generatePos();
    for (j = 0, len = posAry.length; j < len; j++) {
      ref = posAry[j], x = ref[0], y = ref[1];
      img = $('<img>').attr('src', './img/town.png').addClass('town').css({
        left: '' + x + 'px',
        top: '' + y + 'px'
      });
      $('#map').append(img);
    }
    end = Utility.militime(true);
    return console.log("" + (end - start) + " sec");
  };

  Map.generatePos = function() {
    var canPut, j, k, l, m, mapAry, o, pickX, pickY, posAry, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, t, x, y;
    mapAry = Utility.generateArray(this.MAP_X, this.MAP_Y, true);
    posAry = [];
    for (t = j = 0, ref = this.TOWN_NUM; 0 <= ref ? j < ref : j > ref; t = 0 <= ref ? ++j : --j) {
      canPut = [];
      for (x = k = 0, ref1 = mapAry.length; 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
        for (y = l = 0, ref2 = mapAry[x].length; 0 <= ref2 ? l < ref2 : l > ref2; y = 0 <= ref2 ? ++l : --l) {
          if (mapAry[x][y]) {
            canPut.push([x, y]);
          }
        }
      }
      if (canPut.length === 0) {
        return false;
      }
      ref3 = canPut.shuffle().pop(), pickX = ref3[0], pickY = ref3[1];
      posAry.push([pickX, pickY]);
      for (x = m = ref4 = pickX - this.TOWN_DISTANCE_MIN, ref5 = pickX + this.TOWN_DISTANCE_MIN; ref4 <= ref5 ? m <= ref5 : m >= ref5; x = ref4 <= ref5 ? ++m : --m) {
        if (!((0 <= x && x < this.MAP_X))) {
          continue;
        }
        for (y = o = ref6 = pickY - this.TOWN_DISTANCE_MIN, ref7 = pickY + this.TOWN_DISTANCE_MIN; ref6 <= ref7 ? o < ref7 : o > ref7; y = ref6 <= ref7 ? ++o : --o) {
          if (!((0 <= y && y < this.MAP_Y))) {
            continue;
          }
          if (Math.pow(pickX - x, 2) + Math.pow(pickY - y, 2) < Math.pow(this.TOWN_DISTANCE_MIN, 2)) {
            mapAry[x][y] = false;
          }
        }
      }
    }
    return posAry;
  };

  return Map;

})();

Town = (function() {
  Town.prototype.name = null;

  function Town(posX, posY) {
    this.posX = posX;
    this.posY = posY;
  }

  Town.generateName = function() {};

  return Town;

})();

Utility = (function() {
  function Utility() {}

  Utility.generateArray = function(x, y, val) {
    var j, k, ref, ref1, res, xx, yAry, yy;
    if (val == null) {
      val = null;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = val;
    }
    for (xx = k = 0, ref1 = x; 0 <= ref1 ? k < ref1 : k > ref1; xx = 0 <= ref1 ? ++k : --k) {
      res[xx] = yAry.copy();
    }
    return res;
  };

  Utility.militime = function(get_as_float) {
    if (get_as_float == null) {
      get_as_float = false;
    }
    return +new Date() / (get_as_float ? 1000 : 1);
  };

  Utility.rand = function(min, max) {
    Math.round();
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  return Utility;

})();

Array.prototype.shuffle = function() {
  var i, n, ref;
  n = this.length;
  while (n) {
    n--;
    i = Utility.rand(0, n);
    ref = [this[n], this[i]], this[i] = ref[0], this[n] = ref[1];
  }
  return this;
};

Array.prototype.in_array = function(value) {
  var j, len, v;
  for (j = 0, len = this.length; j < len; j++) {
    v = this[j];
    if (v === value) {
      return true;
    }
  }
  return false;
};

Array.prototype.copy = function() {
  var j, k, len, len1, res, res2, v, v2;
  res = [];
  for (j = 0, len = this.length; j < len; j++) {
    v = this[j];
    res2 = [];
    for (k = 0, len1 = v.length; k < len1; k++) {
      v2 = v[k];
      res2.push(v2);
    }
    res.push(res2);
  }
  return res;
};
